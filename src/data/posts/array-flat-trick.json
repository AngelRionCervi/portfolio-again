{
  "title": "Array.flat has a cool use",
  "slug": "array-flat-trick",
  "date": "2023-12-03T10:32:14+00:00",
  "id": "post_1",
  "contents": [
    {
      "type": "text",
      "content": "I feel like the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\">Array.flat</a> method is often forgotten, it does the simple thing of returning a new flattened array without mutating it's source array:",
      "id": "1"
    },
    {
      "type": "code",
      "content": "[0, 1, 2, [3, 4]].flat() // -> [0, 1, 2, 3, 4]",
      "id": "2"
    },
    {
      "type": "text",
      "content": "essentially creating a new array with all sub-array elements spread into it recursively up to the specified depth.",
      "id": "3"
    },
    {
      "type": "text",
      "content": "It's basically a hydraulic press for arrays.",
      "id": "4"
    },
    {
      "type": "image",
      "src": "/posts/arrayman-getting-pressed.jpg",
      "alt": "hydraulic press for array",
      "id": "5"
    },
    {
      "type": "text",
      "content": "It can take a number as an argument which defines how many recursions to perform, by default it's 1, but you can set it to <code>Infinity</code> (or <code>Number.POSITIVE_INFINITY</code>) to flatten arrays as deep as possible.",
      "id": "6"
    },
    {
      "type": "code",
      "content": "[0, 1, 2, [3, [4]]].flat() // -> [0, 1, 2, 3, [4]]\n[0, 1, 2, [3, [4]]].flat(Infinity) // -> [0, 1, 2, 3, 4]",
      "id": "7"
    },
    {
      "type": "text",
      "content": "In some cases this method can be quite useful, I find myself using it when a value could also be treated as an array of values.",
      "id": "8"
    },
    {
      "type": "text",
      "content": "For example, there is this function in the codebase of a client that fetches articles based on their id. This function can either fetch one or multiple articles if a single id or an array of ids is passed by argument.",
      "id": "9"
    },
    {
      "type": "code",
      "content": "function fetchArticles(id: string | string[]) {\n  // fetch articles\n}",
      "id": "10"
    },
    {
      "type": "text",
      "content": "If we don't want to handle both types of argument differently we can write:",
      "id": "11"
    },
    {
      "type": "code",
      "content": "function fetchArticles(id: string | string[]) {\n  const listIds = [id].flat()\n  return fetch(`someurl/article?ids=${listIds.join(',')}`)\n}",
      "id": "12"
    },
    {
      "type": "text",
      "content": "Now both cases are handled, <code>listIds</code> will always be an array of depth 1, whether we have a single id or a list of ids, no need for conditions to check the type of the argument or separate fetch calls.",
      "id": "13"
    }
  ]
}